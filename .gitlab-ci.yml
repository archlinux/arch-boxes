default:
  image: "archlinux:latest"

stages:
  - lint
  - build
  - test
  - publish
  - cleanup

shellcheck:
  stage: lint
  before_script:
    - pacman -Syu --needed --noconfirm shellcheck
  script:
    - shopt -s globstar
    - shellcheck **/*.sh

shfmt:
  stage: lint
  before_script:
    - pacman -Syu --needed --noconfirm shfmt
  script:
    - shopt -s globstar
    - shfmt -i 2 -ci -d **/*.sh

.build:
  stage: build
  before_script:
    - pacman -Syu --needed --noconfirm gptfdisk arch-install-scripts qemu-headless jq
  script:
    - echo "BUILD_VERSION=$(date +%Y%m%d).$CI_JOB_ID" > build.env
    - export $(< build.env)
    - ./build-inside-vm.sh "${BUILD_VERSION}"
  after_script:
    - echo "image_size_megabytes{image=\"basic\"} $(du -m output/*basic*qcow2)" > metrics.txt
    - echo "image_size_megabytes{image=\"cloudimg\"} $(du -m output/*cloudimg*qcow2)" >> metrics.txt
    - echo "image_size_megabytes{image=\"libvirt\"} $(du -m output/*libvirt*box)" >> metrics.txt
    - echo "image_size_megabytes{image=\"virtualbox\"} $(du -m output/*virtualbox*box)" >> metrics.txt
  artifacts:
    name: "output"
    paths:
      - "output/*"
    expire_in: 2d
    reports:
      metrics: metrics.txt
      dotenv: build.env

build:
  extends: .build
  tags:
    - vm
  except:
    - master@archlinux/arch-boxes
    - schedules@archlinux/arch-boxes

build:secure:
  extends: .build
  tags:
    - secure
    - vm
  only:
    - master@archlinux/arch-boxes
    - schedules@archlinux/arch-boxes

test-vagrant-boxes-format:
  stage: test
  before_script:
    - pacman -Syu --needed --noconfirm vagrant
  script:
    - vagrant box add output/Arch-Linux-x86_64-virtualbox-*.box --name archlinux-vbox
    - vagrant box add output/Arch-Linux-x86_64-libvirt-*.box --name archlinux-libvirt

test-basic-qemu:
  stage: test
  tags:
    - fast-single-thread
  variables:
    SSHPASS: arch
  before_script:
    - pacman -Syu --needed --noconfirm qemu-headless sshpass
  script:
    - qemu-system-x86_64 -m 512 -net nic -net user,hostfwd=tcp::2222-:22 -drive file=$(ls output/Arch-Linux-x86_64-basic-*.qcow2),if=virtio -nographic &
    - timeout 15m sh -c "while ! sshpass -e ssh -o ConnectTimeout=2 -o StrictHostKeyChecking=no arch@localhost -p 2222 sudo true; do sleep 1; done"

test-cloudimg-qemu:
  stage: test
  tags:
    - fast-single-thread
  variables:
    SSHPASS: passw0rd
  before_script:
    - pacman -Syu --needed --noconfirm qemu-headless cdrtools sshpass
  script:
    - |
      cat > user-data <<EOF
      #cloud-config
      password: '${SSHPASS}'
      chpasswd: { expire: False }
      ssh_pwauth: True
      packages:
        - tmux
        - tree
      runcmd:
        - [ echo, 'Install more packages using runcmd.' ]
        - [ pacman, --noconfirm, -Syu, bat ]
        - [ touch, /runcmd_successful ]
      EOF
    - |
      cat > meta-data <<EOF
      instance-id: iid-local01
      local-hostname: cloudimg
      EOF
    - cat user-data meta-data
    - genisoimage -output seed.iso -volid cidata -joliet -rock user-data meta-data
    - qemu-system-x86_64 -m 512 -net nic -net user,hostfwd=tcp::2222-:22 -drive file=$(ls output/Arch-Linux-x86_64-cloudimg-*.qcow2),if=virtio -drive file=seed.iso,if=virtio -nographic &    
    - timeout 15m sh -c "while ! sshpass -e ssh -o ConnectTimeout=2 -o StrictHostKeyChecking=no arch@localhost -p 2222 true; do sleep 1; done"
    - timeout 15m sh -c "while ! sshpass -e ssh -o ConnectTimeout=2 -o StrictHostKeyChecking=no arch@localhost -p 2222 pacman -Q bat tmux tree; do sleep 1; done"
    - timeout 15m sh -c "while ! sshpass -e ssh -o ConnectTimeout=2 -o StrictHostKeyChecking=no arch@localhost -p 2222 test -f /runcmd_successful ; do sleep 1; done"

publish:
  stage: publish
  tags:
    - secure
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_PUBLISH == "TRUE"
  before_script:
    - pacman -Syu --needed --noconfirm vagrant
  script:
    - |
      for file in output/*; do
          base="$(basename "${file}")"
          curl -sSf --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "${file}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/images/v${BUILD_VERSION}/${base}"
      done
    - vagrant cloud auth login --token "${VAGRANT_API_TOKEN}"
    - vagrant cloud auth login --check
    - vagrant cloud box show archlinux/archlinux
    - vagrant cloud publish archlinux/archlinux "${BUILD_VERSION}" libvirt output/Arch-Linux-x86_64-libvirt-*.box --release -f
    - vagrant cloud publish archlinux/archlinux "${BUILD_VERSION}" virtualbox output/Arch-Linux-x86_64-virtualbox-*.box --release -f

cleanup:
  stage: cleanup
  needs: []
  tags:
    - secure
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CLEANUP_PACKAGE_REGISTRY == "TRUE"
  before_script:
    - pacman -Syu --noconfirm jq
  script:
    - |
      for id in $(curl --silent --fail --show-error "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages?per_page=100&order_by=created_at&sort=asc" | jq '.[] | select(.created_at | split("T")[0] | . <= (now|strflocaltime("%Y-%m-%d"))) | .id'); do
        curl --silent --fail --show-error --request DELETE --header "PRIVATE-TOKEN: ${GITLAB_PROJECT_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/${id}"
      done
